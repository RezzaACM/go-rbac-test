// package main

// import (
// 	"context"
// 	"net/http"
// 	"os"
// 	"os/signal"
// 	"syscall"
// 	"time"

// 	"example.com/go-crud/db"
// 	logger "example.com/go-crud/utils"
// 	"github.com/gin-gonic/gin"
// 	"github.com/rs/zerolog/log"
// )

// func main() {
// 	// initialize the logger
// 	logger.InitLogger()

// 	// Initialize database
// 	db.InitPosgresDB()

// 	router := gin.Default()

// 	router.GET("/ping", func(ctx *gin.Context) {
// 		ctx.JSON(200, gin.H{"message": "pong"})
// 	})

// 	router.GET("/", func(c *gin.Context) {
// 		c.JSON(200, gin.H{"message": "Hello world!"})
// 	})
// 	srv := &http.Server{
// 		Addr:    ":8080",
// 		Handler: router,
// 	}

// 	// Channel to listen for OS singals
// 	quit := make(chan os.Signal, 1)
// 	signal.Notify(quit, syscall.SIGINT, syscall.SIGTERM)

// 	// Start the server in a goroutine
// 	go func() {
// 		if err := srv.ListenAndServe(); err != nil && err != http.ErrServerClosed {
// 			log.Fatal().Err(err).Msg("Could not listen on :8080")
// 		}
// 	}()
// 	log.Info().Msg("Server is ready to handle requests at :8080")

// 	// Block until we receive a signal
// 	<-quit
// 	log.Info().Msg("Server is shutting down...")

// 	// Create a context with a timeout for the graceful shutdown
// 	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
// 	defer cancel()

// 	// Attempt a graceful shutdown
// 	if err := srv.Shutdown(ctx); err != nil {
// 		log.Fatal().Err(err).Msg("Server forced to shutdown")
// 	}

// 	log.Info().Msg("Server exiting")
// }
